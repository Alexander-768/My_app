#–†–∞–±–æ—Ç–∞–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –∫–∞–∫ –∏ –Ω–∞–¥–æ
import streamlit as st
import pandas as pd
from sklearn.cluster import KMeans
from picture_generation import FusionBrainAPI
from df_to_text import df_to_text_about_segmentation
from deepseek_market_analyst import request_to_deepseek
from proccess_of_GPT_answer import extract_segment_descriptions
import base64
import plotly.express as px

st.set_page_config(page_title="–°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤", layout="wide")
st.title("üéØ –°–∏—Å—Ç–µ–º–∞ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π")

# –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ CSV-—Ñ–∞–π–ª–∞; –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏", type=['csv'])

if uploaded_file is not None:
    # –ß–∏—Ç–∞–µ–º csv
    df = pd.read_csv(uploaded_file)
    
    # –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö
    st.subheader("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö")
    st.dataframe(df.head())
    
    # –í—ã–±–æ—Ä –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    st.subheader("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏")
    numeric_columns = df.select_dtypes(include=['float64', 'int64']).columns
    selected_features = st.multiselect(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏:",
        options=numeric_columns.tolist()
    )
    
    # –¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    if selected_features:
        # –ö–æ–ª-–≤–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
        n_clusters = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤:", min_value=2, max_value=4, value=3)
        
        if st.button("–ü—Ä–æ–≤–µ—Å—Ç–∏ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—é"):
            with st.spinner("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è. –≠—Ç–æ –∑–∞–π–º–µ—Ç –¥–æ 3 –º–∏–Ω—É—Ç..."):
                # –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è
                X = df[selected_features]
                kmeans = KMeans(n_clusters=n_clusters, random_state=42)
                kmeans.fit(X)
                
                
                clustered_df = X.copy()
                clustered_df['cluster'] = kmeans.labels_
                
                # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
                text_description = df_to_text_about_segmentation(clustered_df)
                
                # –û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç –¥–∏–ø—Å–∏–∫–∞
                with st.spinner("–ì–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –æ–ø–∏—Å–∞–Ω–∏—è —Å–µ–≥–º–µ–Ω—Ç–æ–≤. –≠—Ç–æ –∑–∞–π–º–µ—Ç –¥–æ 3 –º–∏–Ω—É—Ç..."):
                    deepseek_response = request_to_deepseek(text_description)
                    segment_descriptions = extract_segment_descriptions(deepseek_response)
                
                
                st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏")
                
                
                api = FusionBrainAPI()
                pipeline_id = api.get_pipeline()
                
                
                cols = st.columns(n_clusters)
                
                for idx, (description, col) in enumerate(zip(segment_descriptions, cols)):
                    with col:
                        st.write(f"**–°–µ–≥–º–µ–Ω—Ç {idx+1}**")
                        st.write(description)
                        
                        
                        with st.spinner(f"–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞ {idx+1}..."):
                            try:
                                uuid = api.generate(description, pipeline_id)
                                files = api.check_generation(uuid)
                                if files:
                                    image_data = base64.b64decode(files[0])
                                    st.image(image_data, caption=f"–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ–≥–º–µ–Ω—Ç–∞ {idx+1}")
                            except Exception as e:
                                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
                

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–∂–¥–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞
            st.subheader("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º")
            for cluster in range(n_clusters):
                with st.expander(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ–≥–º–µ–Ω—Ç–∞ {cluster+1}"):
                    cluster_data = clustered_df[clustered_df['cluster'] == cluster]
                    st.write(cluster_data[selected_features].describe())
            

 
            st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º")

            
            segment_sizes = clustered_df['cluster'].value_counts().sort_index()

            # –°–æ–∑–¥–∞—ë–º –º–µ—Ç–∫–∏ "–°–µ–≥–º–µ–Ω—Ç 1", "–°–µ–≥–º–µ–Ω—Ç 2", ...
            segment_labels = [f"–°–µ–≥–º–µ–Ω—Ç {i+1}" for i in segment_sizes.index]

            #  pie chart 
            fig = px.pie(
                values=segment_sizes.values,
                names=segment_labels,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–∫–∏ –≤–º–µ—Å—Ç–æ —á–∏—Å–µ–ª
                title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º',
                labels={'names': '–°–µ–≥–º–µ–Ω—Ç', 'values': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤'}
            )

     
            fig.update_traces(textposition='inside', textinfo='percent+label')
            fig.update_layout(
                showlegend=True,
                width=800,
                height=600
            )

            
            st.plotly_chart(fig)

    
    elif not selected_features and st.button("–ü—Ä–æ–≤–µ—Å—Ç–∏ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—é"):
        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏")

else:
    st.info("üëÜ –ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª –¥–ª—è –Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∞")